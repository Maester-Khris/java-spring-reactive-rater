version: "3.8"

services:
  # --------------------
  # 1. PostgreSQL Database for SonarQube
  # --------------------
  db:
    image: postgres:15
    container_name: sonarqube-postgres
    restart: always
    environment:
      # Database and user credentials for SonarQube
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonarpass
      POSTGRES_DB: sonarqube
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - sonarnet

  # --------------------
  # 2. SonarQube Server
  # --------------------
  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube
    restart: always
    depends_on:
      - db
    ports:
      # SonarQube Web UI: Host Port 9000 -> Container Port 9000
      - "9000:9000"
    environment:
      # Connection details for the PostgreSQL database service
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonarpass
      # Required for SonarQube with an embedded Elasticsearch
      # Ensure your host system is configured for vm.max_map_count
      # On Linux, run: sudo sysctl -w vm.max_map_count=262144
      # For Mac/Windows, Docker Desktop usually handles this.
      # SONAR_ELASTICSEARCH_BOOTSTRAP_CHECKS_DISABLE: "true" # Can be used if facing issues on initial launch
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - sonarnet

  # --------------------
  # 3. Jenkins Automation Server
  # --------------------
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: always
    privileged: true # Allows Jenkins to run Docker commands
    user: root # Often required for full permissions, but less secure
    ports:
      # Jenkins Web UI: Host Port 8080 -> Container Port 8080
      - "8080:8080"
      # Jenkins JNLP agents: Host Port 50000 -> Container Port 50000
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      # Mount the Docker socket to allow Jenkins to run Docker commands (Docker-in-Docker functionality)
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - sonarnet

# Define the volumes for persistent data storage
volumes:
  postgresql_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  jenkins_home:

# Define a custom network to allow services to communicate by name
networks:
  sonarnet:
    driver: bridge